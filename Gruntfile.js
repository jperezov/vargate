module.exports = function(grunt) {

    //grunt.loadNpmTasks('intern');
    require('google-closure-compiler').grunt(grunt);

    const pkg = grunt.file.readJSON('package.json');
    const year = (new Date).getFullYear();
    const headerComment = '/**!\n' +
                        ' * <%= pkg.name %> v<%= pkg.version %>\n' +
                        ' * Copyright (c) <%= year %> <%= pkg.author.name %>.\n' +
                        ' * Licensed under the <%= pkg.license %> License.\n' +
                        ' */\n';

    grunt.initConfig({
        pkg: pkg,
        year: year,
        requirejs: {
            compile: {
                options: {
                    baseUrl: "src",
                    name: "index",
                    out: "vargate.js",
                    //-----------------------------------------
                    // We have multiple minify steps
                    optimize: "none",
                    // Include dependencies loaded with require
                    findNestedDependencies: true,
                    // Avoid inserting define() placeholder
                    skipModuleInsertion: true,
                    // Avoid breaking semicolons inserted by r.js
                    skipSemiColonInsertion: true,
                    wrap: {
                        start: headerComment + "(function(window) {\n    \"use strict\";\n",
                        end: "}(typeof window !== 'undefined' ? window : this));"
                    },
                    rawText: {},
                    onBuildWrite: convert
                }
            }
        },
        'closure-compiler': {
            my_target: {
                files: {
                    'vargate.min.js': ['vargate.js']
                },
                options: {
                    compilation_level: 'ADVANCED',
                    language_in: 'ECMASCRIPT6_STRICT',
                    language_out: 'ECMASCRIPT5_STRICT',
                    create_source_map: false, //'./BlueEggsAndAds.min.js.map',
                    output_wrapper: headerComment + '(function(){%output%}).call(this)' //# sourceMappingURL=vargate.min.js.map'
                }
            }
        },
        jshint: {
            files: ['Gruntfile.js', 'src/**/*.js', 'test/**/*.js'],
            options: {
                // options here to override JSHint defaults
                globals: {
                    jQuery: false,
                    console: true,
                    module: true,
                    document: true
                }
            }
        }
    });


    /**
     * Strip all definitions generated by requirejs
     * Convert "var" modules to var declarations
     * "var module" means the module only contains a return
     * statement that should be converted to a var declaration
     * This is indicated by including the file in any "var" folder
     * @param {String} name
     * @param {String} path
     * @param {String} contents The contents to be written (including their AMD wrappers)
     */
    function convert(name, path, contents) {
        const rdefineEnd = /\}\s*?\);[^}\w]*$/;
        // Convert var modules
        if (/.\/vars\//.test(path)) {
            // Don't convert `global` into a variable
            if (/window/.test(name)) {
                contents = '';
            } else {
                contents = contents
                    .replace(/define\([\w\W]*?return/, "    var " + (/var\/([\w-]+)/.exec(name)[1]) + " =")
                    .replace(rdefineEnd, "")
                    .replace(/\/\*\*/, "    \/**")
                    .replace(/\s\*\s/g, "     * ")
                    .replace(/\s\*\//g, "     */");
            }
        } else {
            contents = contents
                .replace(/\s*return\s+[^\}]+(\}\s*?\);[^\w\}]*)$/, "$1")
                // Multiple exports
                .replace(/\s*exports\.\w+\s*=\s*\w+;/g, "");

            // Remove define wrappers, closure ends, and empty declarations
            contents = contents
                .replace(/define\([^{]*?{/, "")
                .replace(rdefineEnd, "");

            // Remove anything wrapped with
            // /* ExcludeStart */ /* ExcludeEnd */
            // or a single line directly after a // BuildExclude comment
            contents = contents
                .replace(/\/\*\s*ExcludeStart\s*\*\/[\w\W]*?\/\*\s*ExcludeEnd\s*\*\//ig, "")
                .replace(/\/\/\s*BuildExclude\n\r?[\w\W]*?\n\r?/ig, "");

            // Remove empty definitions
            contents = contents
                .replace(/define\(\[[^\]]*\]\)[\W\n]+$/, "")
                .replace(/@VERSION/, pkg.version);
        }
        return contents;
    }

    grunt.loadNpmTasks('grunt-contrib-requirejs');
    grunt.loadNpmTasks('grunt-contrib-jshint');
    //grunt.loadNpmTasks('intern');

    grunt.registerTask('test', [
        'jshint',
//        'intern'
    ]);

    grunt.registerTask('default', [
        'requirejs',
        'closure-compiler'
    ]);

};
